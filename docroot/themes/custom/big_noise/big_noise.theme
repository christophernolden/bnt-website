<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\media_entity\Entity\Media;


function big_noise_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node) {
    // Custom color CSS
    $css = '';

    if ($node->hasField('field_page_colors') &&
      !$node->field_page_colors->isEmpty()) {
      $css .= _get_page_color_css($node->field_page_colors->getValue()[0]);
    }

    if ($node->hasField('field_show_page_colors') &&
      !$node->field_show_page_colors->isEmpty()) {
      $css .= _get_show_page_css($node->field_show_page_colors->getValue()[0]);
    }

    if (!empty($css)) {
      $variables['page']['#attached']['html_head'][] = [
        [
          '#tag' => 'style',
          '#value' => $css,
          '#weight' => '999',
        ],
        'custom_color_css',
      ];
    }
  }
}


function big_noise_preprocess_page(&$variables) {
  $variables['page_classes'] = [];
  $variables['footer_classes'] = [];

  $node = false;
  if (array_key_exists('node', $variables)) {
    $node = $variables['node'];
  }

  if ($node) {
    $node_type = $node->getType();

    $variables['vista_classes'][] = 'page-type--' . $node_type;

    if ($node_type == 'show') {
      $variables['footer_classes'][] = 'theme-dark';
    }
  }

  if ($variables['is_front']) {
    $variables['vista_classes'][] = 'page--home';
  }
}


function big_noise_preprocess_node(&$variables) {
  $variables['base_path'] = base_path();

  $node = $variables['node'];

  $node_type = $node->getType();
  switch ($node_type) {
    case 'slide':

      if ($node->field_slide_background_image->entity) {
        $slide_background_image_url = file_create_url($node->field_slide_background_image->entity->getFileUri());
        $variables['slide__background_image_url'] = $slide_background_image_url;
      }

      break;
    case 'page':

      // Identify home page for additional elements

      $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();


      // Prepare page title ribbon elements

      $page_title_ribbon_image_field = $node->field_page_title_ribbon_image->getValue();
      if (!empty($page_title_ribbon_image_field)) {
        $page_title_ribbon_image_field = $page_title_ribbon_image_field[0];
        $page_title_ribbon_image_entity = Media::load($page_title_ribbon_image_field['target_id']);
        $page_title_ribbon_image_url = file_create_url($page_title_ribbon_image_entity->field_image->entity->getFileUri());
        $variables['page_title_ribbon_image_url'] = $page_title_ribbon_image_url;

        $page_title_ribbon_image_caption_field = $page_title_ribbon_image_entity->field_caption->getValue();
        if (!empty($page_title_ribbon_image_caption_field)) {
          $page_title_ribbon_image_caption_field = $page_title_ribbon_image_caption_field[0];
          $variables['page_title_ribbon_image_caption'] = $page_title_ribbon_image_caption_field['value'];
        }
      }

      break;
    case 'show':

      // Calculate the performance date range for presentation

      // @TODO Address error when no performance dates have been entered
      $show_performances = $node->field_performances;
      $show_performance_dates = [];
      for ($i = 0; $i < count($show_performances); $i++) {
        $show_performance_dates[] = strtotime($show_performances[$i]->value);
      }
      sort($show_performance_dates);
      $show_performance_begin_date = $show_performance_dates[0];
      $show_performance_end_date = $show_performance_dates[count($show_performance_dates) - 1];

      $show_performance_begin_date_format = (date('Y', $show_performance_begin_date) == date('Y', $show_performance_end_date)) ? 'F j' : 'F j, Y';
      $show_performance_end_date_format = 'F j, Y';

      $show_performance_date_range = date($show_performance_begin_date_format, $show_performance_begin_date) . ' - ' . date($show_performance_end_date_format, $show_performance_end_date);

      $variables['show__performance_date_range'] = $show_performance_date_range;


      // Calculate season status
      $show_season = $node->field_season;


      // Prepare splash image elements
      $show_splash_image_url = file_create_url($node->field_splash_image->entity->getFileUri());
      $variables['show__splash_image_url'] = $show_splash_image_url;


      // Prepare Cast/Creative/Media elements
      $variables['show__has_cast_and_creative'] = (!empty($node->field_cast_and_creative->getValue()));

      break;
    default:
      break;
  }
}


function big_noise_preprocess_block__secondary_navigation_main(&$variables) {
  $variables['menu_container_classes'] = [];

  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node) {
    $node_type = $node->getType();

    if ($node_type == 'show') {
      $variables['menu_container_classes'][] = 'theme-collapsible-layout-mobile';
      $variables['menu_container_classes'][] = 'collapsed';
    }
  }
}


function big_noise_form_mailchimp_signup_subscribe_block_general_mailing_list_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['mergevars']['EMAIL']['#placeholder'] = 'Enter your email address';

  $form['actions']['submit']['#attributes'] = array(
    'class' => array(
      'page--highlight-color--background',
      'page--highlight-color--background--custom',
    ),
  );
}


function big_noise_preprocess_menu__main(&$variables) {
  foreach ($variables['items'] as &$item) {
    _convert_menu_title_to_markup($item);
  }
}


function _convert_menu_title_to_markup(&$item) {
  if (array_key_exists('below', $item) && count($item['below'])) {
    foreach ($item['below'] as &$item) {
      _convert_menu_title_to_markup($item);
    }
  }
  else {
    $item['title'] = Markup::create($item['title']);
  }
}


function _get_show_page_css($colors) {
  $css = '';

  $css .= '
    .show--imagery--image {
      background-color: ' . $colors['left_gradient_color'] . ';
    }

    .show--imagery--wash {
      background-image: linear-gradient(to bottom, ' . $colors['left_gradient_color'] . ' 0%, ' . $colors['right_gradient_color'] . ' 100%);
  ';

  /*
  $css .= '
    #show--container {
      background-image: url(\'/sites/default/files/images/BNT_L5Y_SplashImage.jpg\'),
        radial-gradient(circle at center 14rem, rgba(255,255,255,0.8) 0%, rgba(0,0,0,0.6) 34rem, rgba(0,0,0,0.6) 100%),
        linear-gradient(130deg, ' . $colors['left_gradient_color'] . ' 0%, ' . $colors['left_gradient_color'] . ' 25%, ' . $colors['right_gradient_color'] . ' 100%);
    }
    @media (min-width: 768px) {
      #show--container {
        background-image: url(\'/sites/default/files/images/BNT_L5Y_SplashImage.jpg\'),
          radial-gradient(circle at center 20.5rem, rgba(255,255,255,0.8) 0%, rgba(0,0,0,0.6) 46rem, rgba(0,0,0,0.6) 100%),
          linear-gradient(130deg, ' . $colors['left_gradient_color'] . ' 0%, ' . $colors['left_gradient_color'] . ' 25%, ' . $colors['right_gradient_color'] . ' 100%);
      }
    }
    @media (min-width: 1024px) {
      #show--container {
        background-image: url(\'/sites/default/files/images/BNT_L5Y_SplashImage.jpg\'),
          radial-gradient(circle at center 24rem, rgba(255,255,255,0.8) 0%, rgba(0,0,0,0.6) 62rem, rgba(0,0,0,0.6) 100%),
          linear-gradient(130deg, ' . $colors['left_gradient_color'] . ' 0%, ' . $colors['left_gradient_color'] . ' 25%, ' . $colors['right_gradient_color'] . ' 100%);
      }
    }
  ';
  */

  return $css;
}


function _get_page_color_css($colors) {
  $css = '';

  if (array_key_exists('logo_color', $colors)) {
    $css .= '
      .site--header--logo .image .logo--highlight-color.logo--highlight-color--custom {
        fill: ' . $colors['logo_color'] . ';
      }
    ';
  }

  if (array_key_exists('page_element_color', $colors)) {
    $css .= '
      svg .page--highlight-color.page--highlight-color--custom {
        fill: ' . $colors['page_element_color'] . ';
      }

      .page--highlight-color--background.page--highlight-color--background--custom {
        background: ' . $colors['page_element_color'] . ';
      }

      .page--highlight-color--text.page--highlight-color--text--custom {
        color: ' . $colors['page_element_color'] . ';
      }

      .page--highlight-color--text--hover.page--highlight-color--text--hover--custom:hover {
        color: ' . $colors['page_element_color'] . ';
      }

      .page--highlight-color--text--focus.page--highlight-color--text--focus--custom:focus {
        color: ' . $colors['page_element_color'] . ';
      }
    ';
  }

  return $css;
}
